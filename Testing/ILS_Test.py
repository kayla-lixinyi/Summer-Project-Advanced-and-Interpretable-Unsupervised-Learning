# -*- coding: utf-8 -*-
"""
Created on Tue Dec  7 15:11:57 2021

@author: Xinyi Li
"""

from sklearn.datasets import *
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sys
sys.path.append(".")
from ILS_class import ILS
from scipy import ndimage


import unittest

plt.style.use('ggplot')

euclidean_distance = lambda data, point: np.sqrt(np.sum(np.power(data - point, 2), axis = 1).reshape((len(data), 1)))


class Test(unittest.TestCase):

    def testBlobs(self):
        
        '''
        2D basic dataset generated by make_blobs unit test for clustering testing
        '''
        
        no_of_clusters = 4
        
        # Create the dataset
        X, y = make_blobs(n_samples = 500, centers= 4, n_features=2,random_state=185)
        
        # Run the clustering algorithm
        ils = ILS(n_clusters=4, min_cluster_size = 50)
        ils.fit(X)

        # Plotting
        ils.plot_labels()
        
    
    def testCircles(self):
        
        '''
        2D basic dataset generated by make_circles unit test for clustering testing
        '''
        
        no_of_clusters = 2
        
        # Create the dataset
        X, y = make_circles(n_samples=500, shuffle = True, noise = 0.05, factor = 0.5, random_state = 10)
        
        # Run the clustering algorithm
        ils = ILS(n_clusters=2, min_cluster_size = 50)
        print(type(X))
        ils.fit(X)
        
        # Plotting
        ils.plot_labels()
        
        
       
    def testMoons(self):
        
        '''
        2D baisc dataset generated by make_moons unit test for clustering testing
        '''
        
        no_of_clusters = 2
        
        # Create the dataset
        X, y = make_moons(n_samples=300, shuffle = True, noise = 0.1, random_state = 10)
        
        # Run the clustering algorithm
        ils = ILS(n_clusters=2, min_cluster_size = 100)
        ils.fit(X)
        
        # Plotting
        ils.plot_labels()
        

    def testArtSet_one(self):
        
        '''
        2D artifacial dataset unit test for clustering testing
        '''
        
        target = np.array(pd.read_csv(r"Testing\Artificial Data sets\target.csv", header=1))[:, :-1]
        
        # Run the clustering algorithm
        ils = ILS(min_cluster_size = 50)
        ils.fit(target)

        # Plotting
        ils.plot_labels()
    
    
    def testArtSet_two():    
        
        '''
        2D artifacial dataset unit test for clustering testing
        '''
        
        zelnik1 = np.array(pd.read_csv(r"Testing/Artificial Data sets/zelnik1.csv", header=1))[:, :-1]
    
        # Run the clustering algorithm
        ils = ILS(min_cluster_size = 50)
        ils.fit(zelnik1)

        # Plotting
        ils.coloured_rmin()
        ils.plot_labels()
        ils.rainbow_rmin(notebook = True)
    
    
    def testArtSet_three(): 
        
        '''
        2D artifacial dataset unit test for clustering testing
        '''
        
        smile2 = np.array(pd.read_csv(r"Testing/Artificial Data sets/smile2.csv", header=1))[:, :-1]
    
        # Run the clustering algorithm
        ils = ILS(min_cluster_size = 50)
        ils.fit(smile2)

        # Plotting
        ils.coloured_rmin()
        ils.plot_labels()
        ils.rainbow_rmin(notebook = True)
        
    def test_threeD_ArtSet(): 
        
        '''
        3D artifacial dataset unit test for clustering testing
        '''
        
        three_d = np.array(pd.read_csv(r"Testing/Artificial Data sets/High dimensional dataset/3d-line1.csv", header=1))[:, :-1]
    
        # Run the clustering algorithm
        ils = ILS(min_cluster_size = 50)
        ils.fit(three_d)

        # Plotting
        ils.coloured_rmin()
        ils.plot_labels()
        ils.rainbow_rmin(notebook = True)

       


if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()
